#+TITLE: Events and Filters
#+AUTHOR: @toshi_a
#+OPTIONS: ^:nil
#+OPTIONS: num:nil
#+STYLE: <link rel="stylesheet" type="text/css" href="event.css" />

* Twitter
  Twitter APIのレスポンスから引き起こされるイベント。Twitterで発生した事象をトリガーにできる。
** appear
   - [[http://mikutter.hachune.net/rdoc/Message.html][Messages]] :: Messageの配列
   生成されたありとあらゆるMessageを受信する。
   coreプラグインのフィルタによって、一度渡されたMessageは二度と渡されないようになっている。
   同時に大量のappearイベントが起こる場合は、配列に複数のMessageが渡され、イベントがひとつに纏められることがある。

** update
   - [[http://mikutter.hachune.net/rdoc/Service.html][Service]] :: アカウント情報
   - [[http://mikutter.hachune.net/rdoc/Message.html][Messages]] :: Messageの配列
   ホームタイムラインに入るMessageを受信した時に発生する。restプラグインで定期的に取得したものと、streamingプラグインでUserStreamによって取得されたMessageが渡される。
   coreプラグインのフィルタによって、一度渡されたMessageは二度と渡されないようになっている。
   同時に大量のupdateイベントが起こる場合は、配列に複数のMessageが渡され、イベントがひとつに纏められることがある。

** favorite
   - [[http://mikutter.hachune.net/rdoc/Service.html][Service]] :: 受信したアカウント
   - [[http://mikutter.hachune.net/rdoc/User.html][User]] :: イベントを発生したユーザ
   - [[http://mikutter.hachune.net/rdoc/Message.html][Message]] :: お気に入り登録されたMessage
   UserがMessageをお気に入り登録をされたことを通知する。通知のためのイベントなので、フィルタすることは出来ない。

** follow
   - [[http://mikutter.hachune.net/rdoc/User.html][User]] :: フォローしたユーザ
   - [[http://mikutter.hachune.net/rdoc/User.html][User]] :: フォローされたユーザ
   前者のユーザが後者のユーザをフォローした時に発生する。
** mention
   - [[http://mikutter.hachune.net/rdoc/Service.html][Service]] :: アカウント情報
   - [[http://mikutter.hachune.net/rdoc/Message.html][Messages]] :: Messageの配列
   リプライを受信した時に発生する。restプラグインで定期的に取得したものと、streamingプラグインでUserStreamによって取得されたMessageが渡される。
   coreプラグインのフィルタによって、一度渡されたMessageは二度と渡されないようになっている。
   同時に大量のupdateイベントが起こる場合は、配列に複数のMessageが渡され、イベントがひとつに纏められることがある。
** mypost
   - [[http://mikutter.hachune.net/rdoc/Service.html][Service]] :: アカウント情報
   - [[http://mikutter.hachune.net/rdoc/Message.html][Messages]] :: Messageの配列
   自分の投稿を受信した時に発生する。mikutterから投稿したものと、restやstreamingプラグインによって、他のアプリケーションから自分が投稿したMessageも受け取る。
   coreプラグインのフィルタによって、一度渡されたMessageは二度と渡されないようになっている。
   同時に大量のmypostイベントが起こる場合は、配列に複数のMessageが渡され、イベントがひとつに纏められることがある。

** posted
   - [[http://mikutter.hachune.net/rdoc/Service.html][Service]] :: アカウント
   - [[http://mikutter.hachune.net/rdoc/Message.html][Messages]] :: 自分の投稿
   Serviceの投稿したMessageを受け取る。
   coreプラグインのフィルタによって、一度渡されたMessageは二度と渡されないようになっている。
   同時に大量のappearイベントが起こる場合は、配列に複数のMessageが渡され、イベントがひとつに纏められることがある。
** retweet
   - [[http://mikutter.hachune.net/rdoc/Message.html][Messages]] :: リツイートの配列
   受信したすべてのReTweetをMessageとして受け取る。
** retweet_destroyed
   - [[http://mikutter.hachune.net/rdoc/Message.html][Message]] :: リツイートされていたMessage
   - [[http://mikutter.hachune.net/rdoc/User.html][User]] :: リツイートしていたUser
   - Numeric :: リツイートのstatus_id
   UserがMessageにたいして行なっていたリツイートを取り消したことを通知する。通知イベントなのでフィルタすることは出来ない。

** unfavorite
   - [[http://mikutter.hachune.net/rdoc/Service.html][Service]] :: 受信したアカウント
   - [[http://mikutter.hachune.net/rdoc/User.html][User]] :: イベントを発生したユーザ
   - [[http://mikutter.hachune.net/rdoc/Message.html][Message]] :: お気に入り登録されたMessage
   UserがMessageをお気に入り登録解除したことを通知する。通知のためのイベントなので、フィルタすることは出来ない。

* GUI関連
  GUI操作は殆どがイベントによって実現されている。これによって、プラグインから柔軟な操作ができるようになっている。

** after_gui_tab_reordered
   - [[http://mikutter.hachune.net/rdoc/Plugin/GUI/Tab.html][Plugin::GUI::Tab]] :: 移動されたタブ
   タブが移動された後に発生するイベント

** after_gui_tab_reparent
   - [[http://mikutter.hachune.net/rdoc/Plugin/GUI/Tab.html][Plugin::GUI::Tab]] :: 移動されたタブ
   - [[http://mikutter.hachune.net/rdoc/Plugin/GUI/Pane.html][Plugin::GUI::Pane]] :: 新しい親Pane
   - [[http://mikutter.hachune.net/rdoc/Plugin/GUI/Pane.html][Plugin::GUI::Pane]] :: 以前の親Pane
   タブが別のペインに移動された後に発生するイベント

** before_postbox_post
   - String :: 投稿しようとしている内容
   PostBoxから投稿しようとしているテキストをイベントとして受け取れる。このイベントは通知用なので、フィルタすることは出来ない。
   ただし、フィルタを使うことで、確実に投稿される直前にある処理を実行することができる。

** gui_timeline_move_cursor_to
   - [[http://mikutter.hachune.net/rdoc/Plugin/GUI/Timeline.html][Plugin::GUI::Timeline]] :: 対象になるタイムライン
   - Symbol|Numeric :: 移動する向き(:prev or :next)か、画面上のy座標
   TLのフォーカスを前後どちらかに動かす。数値が指定された場合は、表示上のy座標の値が指しているMessageにフォーカスを移動する。

** gui_window_rewindstatus
   - [[http://mikutter.hachune.net/rdoc/Plugin/GUI/Window.html][Plugin::GUI::Window]] :: ウィンドウ
   - String :: ステータスバーの文字列
   - Numeric :: 有効期限(sec)
   指定された秒数の間、指定されたウィンドウのステータスバーに文字列を表示する。
   ステータスバーはアクティビティから更新されるべきで、このイベントは直接使ってはならない。

* Gtk関連
  Gtkプラグインは、UIをGtk2でレンダリングするための標準プラグイン。
  このプラグインもいくつかのイベントやフィルタを提供してる。
** gui_get_gtk_widget
   - [[http://mikutter.hachune.net/rdoc/Plugin/GUI/Widget.html][Plugin::GUI::Widget]] :: 仮想ウィジェット
   渡されたウィジェットを対応するGtk::Widgetのサブクラスのインスタンスに変換する。
* 内部処理
  内部処理は、通常はメソッドにラップされていて、callやlistenしないようなイベントのこと。
  例えば、あるメソッドを呼べば実は内部的にはイベントの発火をしていて、コアがそのイベントを受け取って何らかの処理をしているという場合がこれにあたる。
  また、通知のために用意されて入るが、標準ではそのイベントを受け取らないというものも含まれる。

** achievement_took
   - Plugin::Achievement::Achievement :: 解除された実績オブジェクト
   実績が解除された時に呼ばれる。achievementプラグインがこのイベントを受け取ると、アクティビティに実績解除の通知が表示される。
** entity_linkrule_added
   - Hash :: オプション値
			 - slug :: スラッグ
			 - filter_id :: 内部フィルターID
			 - regexp :: エンティティを貼る範囲にマッチする正規表現
			 - callback :: クリックされた時のコールバックブロック

   エンティティの新規登録をする。@...やURLにリンクを張るときに使う。通常はこのイベントを直接発火すべきでない。
   そのような用途には、 Message::Entity#addlinkrule を使う。
   引数は以下の様なキーを持つHashオブジェクト
   
** extract_tab_create
   - Hash :: オプション値
	 - name :: タブの名前
	 - sexp :: 抽出条件(MIKU Langで評価できるS式)
	 - sources :: データソースの配列
	 - id :: 抽出タブのID
   抽出タブを新しく作成する。
** extract_tab_update
   - Hash :: オプション値
	 - name :: タブの名前
	 - sexp :: 抽出条件(MIKU Langで評価できるS式)
	 - sources :: データソースの配列
	 - id :: 抽出タブのID
   抽出タブの情報を更新する
** extract_tab_delete
   - Numeric :: 抽出タブのID
   抽出タブを削除する
** image_cache_saved
   - String :: URL
   - String :: 画像ファイルのバイナリデータ
   URLの画像がメモリキャッシュに載った時に呼ばれるイベント。画像をファイルキャッシュするプラグインは、このイベントを受信したら画像をファイルに書き出している。

** mikutwitter_ratelimit
   - [[http://mikutter.hachune.net/rdoc/MikuTwitter/Query.html][MikuTwitter::Query]] :: MikuTwitterオブジェクト
   - [[http://mikutter.hachune.net/rdoc/MikuTwitter/RateLimiting.html][MikuTwitter::RateLimiting]] :: 規制オブジェクト
   
   規制されている状態でAPIリクエストをするとそのエンドポイント毎に呼ばれるイベント。
   ただし、同じエンドポイントの同じウィンドウ内で二回以上呼ばれることはない。
** modify_activity
   - Hash :: オプション値
	 - kind :: アクティビティの種類
	 - title :: タイトル
	 - date :: 発生時刻
	 - description :: 詳細
   activityが発生した時のイベント。これをactivityプラグインが受け取ると、然るべき通知がされる。
   普通、PluginDSLのactivityメソッドを使って発生させる。
** open_setting
   設定を開く。
** processtime
   - Symbol :: 処理区分
   - String :: 経過時間,ソースの行数とファイル名
   
   DelayerやDeferredなどのブロックが一つ処理される毎に発火される。
** query_end
   - Hash :: オプション値
	 - serial :: リクエストシリアルナンバー
	 - method :: リクエストメソッド(GETかPOST)
	 - path :: エンドポイント
	 - options :: リクエスト引数
	 - start_time :: リクエスト開始時間
	 - end_time :: リクエスト終了時間
	 - res :: レスポンスオブジェクト(Net::HTTPResponse)
	 - mikutwitter :: MikuTwitterオブジェクト
	 - ratelimit :: 規制オブジェクト
   APIリクエスト終了ごとに発生するイベント。通知のみが目的なので、フィルタすることは出来ない

** query_start
   - Hash :: オプション値
	 * serial :: リクエストシリアルナンバー
	 * method :: リクエストメソッド(GETかPOST)
	 * path :: エンドポイント
	 * options :: リクエスト引数
	 * start_time :: リクエスト開始時間
	 * mikutwitter :: MikuTwitterオブジェクト
   APIリクエスト開始ごとに発生するイベント。通知のみが目的なので、フィルタすることは出来ない

** send_bugreport
   - Hash :: オプション値
	 - backtrace :: バックトレース(JSON文字列)
	 - file :: クラッシュしたファイル
	 - line :: 行数
	 - exception_class :: 例外クラス
	 - description :: 例外文字列
	 - ruby_version :: RUBY_VERSION の値
	 - rubygtk_version :: RubyGtkのバージョン
	 - platform :: RUBY_PLATFORM の値
	 - version :: Environment::VERSION の値
   バグレポートを送信したことを通知するイベント。

** show_profile
   - [[http://mikutter.hachune.net/rdoc/Service.html][Service]] :: 自分のアカウント
   - [[http://mikutter.hachune.net/rdoc/User.html][User]] :: 表示するユーザ
   profileプラグインがこれを受け取ると、Userのプロフィールタブが生成される。
